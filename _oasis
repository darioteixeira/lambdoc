OASISFormat:    0.4
Name:           Lambdoc
Version:        1.0-beta4
Synopsis:       Support for semantically rich documents in web applications
Authors:        Dario Teixeira <dario.teixeira@nleyten.com>
Homepage:       http://lambdoc.forge.ocamlcore.org/
License:        GPL-2
LicenseFile:    LICENSE
Plugins:        META (0.4), DevFiles (0.4)
BuildTools:     ocamlbuild, make
AlphaFeatures:  ocamlbuild_more_args
Description:
    Lambdoc is a library providing support for semantically rich documents in web applications,
    built with Ocsigen/Eliom integration in mind.  It includes parsers for four different markup
    languages: Lambtex, Lambxml, Lamblite, and Markdown.  The first is inspired by LaTeX, the
    second is an XML-based markup based on HTML, the third is a lightweight markup language in
    the spirit of Wiki Creole, and the last is the popular lightweight markup language.
    The library also includes the possibility of outputing any Lambdoc document as an Ocsigen
    (Tyxml) HTML value.

Flag "cmd"
    Description:    Build command line utility Lambcmd
    Default:        true

Flag "fuzzer"
    Description:    Build fuzzer
    Default:        false

Library "lambdoc"
    Path: src/lib
    Modules:
        Lambdoc_prelude,
        Lambdoc_document, Lambdoc_document_ambivalent, Lambdoc_document_blkcat, Lambdoc_document_feature, Lambdoc_document_foldmap, Lambdoc_document_idiosyncrasies, Lambdoc_document_invalid, Lambdoc_document_valid,
        Lambdoc_reader, Lambdoc_reader_ast, Lambdoc_reader_extension, Lambdoc_reader_compiler, Lambdoc_reader_maker,
        Lambdoc_reader_permission, Lambdoc_reader_preprocessor, Lambdoc_reader_readconv, Lambdoc_reader_style,
        Lambdoc_rlambtex, Lambdoc_rlambtex_context, Lambdoc_rlambtex_lexer, Lambdoc_rlambtex_parser, Lambdoc_rlambtex_tokenizer, Lambdoc_rlambtex_readable, Lambdoc_rlambtex_reader,
        Lambdoc_rlamblite, Lambdoc_rlamblite_parser, Lambdoc_rlamblite_lexer, Lambdoc_rlamblite_tokenizer, Lambdoc_rlamblite_readable, Lambdoc_rlamblite_reader,
        Lambdoc_rlambxml, Lambdoc_rlambxml_readable, Lambdoc_rlambxml_reader,
        Lambdoc_writer, Lambdoc_writer_emblang, Lambdoc_writer_explanations, Lambdoc_writer_maker, Lambdoc_writer_translations, Lambdoc_writer_writeconv,
        Lambdoc_whtml, Lambdoc_whtml_writable, Lambdoc_whtml_writer
  BuildDepends:
        blahcaml, camlhighlight, menhirLib, re, sedlex, sexplib, threads, tyxml, xmlm

Document "lambdoc"
    Type:                   ocamlbuild (0.4)
    BuildTools:             ocamldoc
    Title:                  API reference for Lambdoc
    XOCamlbuildPath:        .
    XOCamlbuildExtraArgs:   "-docflags '-colorize-code -short-functors -charset utf-8'"
    XOCamlbuildLibraries:   lambdoc

Executable "lambcmd"
    Build$:                 flag(cmd)
    Install$:               flag(cmd)
    Path:                   src/lambcmd
    MainIs:                 lambcmd.ml
    BuildTools:             ocamlbuild
    BuildDepends:           lambdoc, cmdliner
    CompiledObject:         best

Executable "test_prelude"
    Build$:                 flag(tests)
    Path:                   tests
    MainIs:                 test_prelude.ml
    Install:                false
    BuildDepends:           alcotest, lambdoc
    CompiledObject:         best

Executable "test_lambdoc"
    Build$:                 flag(tests)
    Path:                   tests
    MainIs:                 test_lambdoc.ml
    Install:                false
    BuildDepends:           alcotest, lambdoc, re, tyxml, unix
    CompiledObject:         best

Executable "test_fuzzer"
    Build$:                 flag(tests) && flag(fuzzer)
    Path:                   tests
    MainIs:                 test_fuzzer.ml
    Install:                false
    BuildDepends:           cmdliner, lambdoc, threads
    CompiledObject:         best

Test "test_prelude"
    Run$:                   flag(tests)
    Command:                $test_prelude
    WorkingDirectory:       tests/testsets

Test "test_lambdoc"
    Run$:                   flag(tests)
    Command:                $test_lambdoc
    WorkingDirectory:       tests/testsets

Test "test_fuzzer"
    Run$:                   flag(tests) && flag(fuzzer)
    Command:                $test_fuzzer
    WorkingDirectory:       tests/fuzzer

