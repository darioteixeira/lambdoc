\newmacro{lambdoc}{0}{\caps{lambdoc}}
\newmacro{lambwiki}{0}{\caps{lambwiki}}
\newmacro{lambtex}{0}{\caps{lambtex}}
\newmacro{thin}{0}{&#8202;}
\newmacro{marker}{1}{\bold{\arg{1}&#x202f;\arg{1}}}

\title{The \lambwiki Manual}
\subtitle{Dario Teixeira}
\subtitle{September 2014}

\toc

\rule

\p<initial>{\lambwiki is a lightweight markup language for the description of documents.
It is inspired by \caps{markdown}\cite{bib:markdown} and \caps{creole}\cite{bib:creole},
and remains for the most part compatible with the latter. Similarly to other lightweight
markup languages, \lambwiki is targeted at the description of documents consisting
largely of \caps{utf-8} text, and where syntactic annotations are inspired by conventions
used in email.}

\lambwiki is part of the family of markup languages supported by the \lambdoc
library\cite{bib:lambdoc}.  However, \lambwiki supports only a limited subset of
all the features available in \lambdoc.  While not as powerful and flexible as a
full-featured markup language like \lambtex\cite{bib:lambtex}, the lightweight markup
used by \lambwiki should be sufficient to describe most simple documents.  If your
document requires a richer set of semantic elements, then obviously you should consider
using instead a full-fledged markup like \lambtex.


\section{Paragraphs and text formatting}

A \lambwiki document is composed of a sequence of blocks.  Examples of blocks include
paragraphs of text, quotes, and source-code listings.  Blocks occupy the entire width
of the page, and are vertically separated from other blocks by a small margin.

Paragraphs are the simplest of all blocks, being composed of just text (either plain or
annotated with special formatting directives).  To separate two paragraphs, you must
put at least one blank line between them.  However, the blank line is optional when
separating a paragraph and a non-paragraph block.  Moreover, linebreaks are irrelevant
within the same paragraph.

It is possible to apply some special formatting to passages of text. This is done by
enclosing the passage between special begin and end markers, which always consist of
two identical characters. \sref{tab:format} lists all the formatting options and the
begin/end markers used for each.  Note that in many cases the begin marker is identical
to the end marker.  Also, bear in mind that nesting formatting directives is not allowed.

\begin[tab:format]{table}
{Text formatting annotations.  Simply wrap between the begin and end markers the passage
of text you wish to format.  Note that in many cases the end marker is identical to
the begin marker.}
\begin{tabular}{ccl}
\head
| Begin marker      | End marker        | Example                                       |
\body
| \marker{*}        | \marker{*}        | You can make some passages be \bold{bold}.    |
| \marker{/}        | \marker{/}        | Here's another way to \emph{emphasise} text.  |
| \marker{\{}       | \marker{\}}       | You can also imitate a \code{typewriter}.     |
| \marker{(}        | \marker{)}        | \lambwiki supports text in small-caps.        |
| \marker{^}        | \marker{^}        | The 1\sup{st} of January has a superscript.   |
| \marker{_}        | \marker{_}        | H\sub{2}O requires a subscript.               |
\end{tabular}
\end{table}

\lambwiki supports also hyperlinks into external
resources.  The general notation for hyperlinks is
\mbox{\code{[[}\thin\code{\emph{uri}}\thin\code{|}\thin\code{\emph{description}}\thin\code{]]}},
where \code{\emph{uri}} is the actual resource identifier and \code{\emph{description}}
is the clickable hyperlink text.  The latter is optional, meaning that
\mbox{\code{[[}\code{\emph{uri}}\code{]]}} will also produce a hyperlink, but one
using the \caps{uri} itself as description text.

The following source-code fragment illustrates the declaration of paragraphs in
\lambwiki, text formatting commands, and the use of hyperlinks:

\begin<boxed>{source}
Line breaks within one paragraph are not important,
since paragraphs are only terminated by a blank line.

Within a paragraph you can format certain passages
in **bold text**, //emphasised text//,
{{monospaced text}}, or even in ((small caps)).

For the sake of completeness, it is also possible
to declare superscripts such as 1^^st^^ of January,
and subscripts such as H__2__O.

Adding a hyperlink into the [[http://www.wikipedia.org/|Wikipedia]]
is easy.  Here's another one: [[http://www.wikipedia.org/]].
\end{source}

This is the corresponding output from the \lambwiki composer:

\begin{subpage}
Line breaks within one paragraph are not important,
since paragraphs are only terminated by a blank line.

Within a paragraph you can format certain passages
in \bold{bold text}, \emph{emphasised text},
\code{monospaced text}, or even in \caps{small caps}.

For the sake of completeness, it is also possible
to declare superscripts such as 1\sup{st} of January,
and subscripts such as H\sub{2}O.

Adding a hyperlink into the \link{http://www.wikipedia.org/}{Wikipedia}
is easy.  Here's another one: \link{http://www.wikipedia.org/}.
\end{subpage}


\section{Special characters}

\lambwiki allows the direct use of \caps{html} entities via the same notation used
in \caps{html}.  More precisely, entities are to be enclosed between the characters
'\code{\&}' (ampersand) and '\code{;}' (semicolon), and may be specified by name
or by \caps{unicode} code point in decimal or hexadecimal notation.  As an example,
if the \caps{euro} symbol '\code{&euro;}' is not readily available in your keyboard,
you may enter it in either of the following three manners:

\begin{tabular}{ccc}
\head
| Name              | Decimal           | Hexadecimal       |
\body
| \code{\&euro;}    | \code{\&#8364;}   | \code{\&#x20ac;}  |
\end{tabular}

The reader will have noted that \lambwiki must interpret the character '\code{\&}'
(ampersand) differently, and therefore you need a workaround if you want to input an
actual ampersand.  In fact, there is another character that is interpreted differently
by \lambwiki, and as such also requires a special escaping sequence.  That character
is '\code{\\}' (backslash), which also happens to be the character used for escaping.
Therefore, displaying a backslash or an ampersand is achieved with \code{\\\\} and
\code{\\\&}, respectively.  Another option is of course to use the \code{#47} and
\code{amp} \caps{html} entities.

Note that in most practical situations you can get away with inputting an ampersand
directly without escaping.  This is because the scanner will only interpret an ampersand
as the beginning of an entity declaration if it is immediately followed by an alphabetic
or numeric sequence terminated by a semicolon.  If it is not, then the ampersand is
interpreted as plain text.

Besides individual characters, there are also some multi-character sequences that are
interpreted differently by \lambwiki.  One example are the previously described two
character markers used for text formatting.  \sref{tab:seq} lists all the other ones.
Remember to use the escape character if you wish to input any of these sequences
literally.

\begin[tab:seq]{table}
{Special character sequences and their \lambwiki interpretation.  Remember to use
the backslash for escaping if you wish to input any of these sequences verbatim.
Note that using dash(es) at the start of a line is the marker for unordered lists
(see \mref{sec:lists}{the next section} for details).}
\begin{tabular}{cl}
\head
| Sequence      | Translation                                                   |
\body
| \code{\-\-\-} | Typographic em-dash\br (don't use at the beginning of a line) |
| \code{\-\-}   | Typographic en-dash\br (don't use at the beginning of a line) |
| \code{\`\`}   | Opening double quotes                                         |
| \code{\'\'}   | Closing double quotes                                         |
\end{tabular}
\end{table}


\section[sec:lists]{Lists}

Lists in \lambwiki come in two varieties: ordered and unordered.  The former are
denoted my prefixing each list item with the character '\code{#}', whereas in the
latter case the prefix is '\code{-}'.  Declaring sub-lists (ie, lists within lists)
is also possible: simply repeat either '\code{#}' or '\code{-}' a number of times in
accordance to the depth of the sub-list.  These marker characters may be indented,
as long as they are the first non-whitespace character in the line.

Separating a list from a preceding paragraph with a blank line is not required, though
it is advisable.  Similarly, usage of blank lines between list items is also optional.
More importantly, make sure the list depth as indicated by the number of '\code{#}'
or '\code{-}' characters makes sense: the \lambwiki composer will complain if you
declare at the top-level a list with depth higher than 1, or if a sub-list increases
list depth by more than one unit.

The following sample illustrates lists in \lambwiki.  Note the flexible use of blank
lines and whitespace for indentation.

\begin<boxed>{source}
The reasons are four:

# This is the first reason;

# This is the second reason; it is okay
  to break a line within each item.

# The third reason has a number of sub-clauses:

  -- Alpha
  -- Beta
  -- Gamma

# And here is the fourth and final reason.
\end{source}

This is the result as produced by the composer:

\begin{subpage}
The reasons are four:

\begin{ol}
\li This is the first reason;
\li This is the second reason; it is okay
    to break a line within each item.
\li The third reason has a number of sub-clauses:
    \begin{ul}
    \li Alpha
    \li Beta
    \li Gamma
    \end{ul}
\li And here is the fourth and final reason.
\end{ol}
\end{subpage}


\section{Quotations}

Quotations in \lambwiki follow the email tradition of prefixing each quoted line with
the character '\code{>}' (the greater-than sign).  Following this marker you may have
a normal paragraph or a list definition, as the example below illustrates:

\begin<boxed>{source}
This is what you said:

> Eggs should be opened by their large end.
> Opening them by their small end is heresy.
> Here are three reasons why:
>
> # First;
> # Second;
> # Third.

I beg to differ. Let me expand on why.
\end{source}

This is the result produced by the composer:


\begin{subpage}
This is what you said:

\begin{quote}
Eggs should be opened by their large end.
Opening them by their small end is heresy.
Here are three reasons why:
\begin{ol}
\li First;
\li Second;
\li Third.
\end{ol}
\end{quote}

I beg to differ. Let me expand on why.
\end{subpage}

Quotations within quotations are also legal.  The quotation level is indicated by
the number of '\code{>}' characters that prefix the line.  Whitespace between the
'\code{>}' characters is optional.  Consider thus the following \lambwiki source:

\begin<boxed>{source}
This is your interpretation of the discussion:

>This is what you said:
>
>> Eggs should be opened by their large end.
>> Opening them by their small end is heresy.
\end{source}

This is the result:

\begin{subpage}
This is your interpretation of the discussion:

\begin{quote}
This is what you said:

\begin{quote}
Eggs should be opened by their large end.
Opening them by their small end is heresy.
\end{quote}
\end{quote}
\end{subpage}


\section[sec:verbatim]{Verbatim blocks}

A verbatim block denotes a fragment of text where linebreaks are significant and the
text is to be rendered using a monospaced font.  The primary application of verbatim
blocks is to display \caps{ascii}-art diagrams.  In \lambwiki, the beginning of a
verbatim block is denoted by a line consisting entirely of the characters '\code{(((}'
(plus optional extra specifiers, described below), and its termination by a line
consisting only of the characters '\code{)))}'.  There is no attempt at interpreting
the characters inside a verbatim block; in other words, escaping is not possible,
and neither is the input of \caps{html} entities using the ampersand operator.

Verbatim environments accept a limited form of configuration.  In the same line and
immediately after the begin marker you may specify one or more class name declarations,
separated by commas.  Each class name maps directly to \caps{html} class names,
but preppended by '\code{doc_class_}' (the prefix prevents name clashes).  Note that
classnames must begin with a lowercase Roman letter, and may contain only lowercase
Roman letters, digits, the character '-' (dash), or the character '_' (underscore).

For your convenience, the \caps{css} shipped with \lambwiki includes some predefined
class names for use with verbatim environments.  These are \code{mult0}, \code{mult1},
and so forth until \code{mult9}.  The integer indicates a multiplying factor for the
contents of the environment.  For a factor of [$x$], the actual scaling relative to
normal size is given by [$\sqrt{2}^x$].  The default factor is 0, which corresponds
to normal size.  One common application of this feature is to display \caps{unicode}
characters as full-sized pictures.  As an example, this is what the \caps{unicode}
snowman (code point \caps{U+2603}) looks like with a multiplier of 7, corresponding
to a font size 11.3 times larger than normal:

\begin<mult7>{verbatim}
☃
\end{verbatim}

In addition, the default \caps{css} also allows floatation specifiers to be used with
verbatim blocks.  Floating specifiers take the form of class names '\code{center}',
'\code{left}', and '\code{right}'.  They declare that the block should be displayed
either centered and occupying the entire width of the page (this is the default),
floating on the left, or floating on the right, respectively.  Note that they map
directly to \caps{css} \code{float} declarations.

To illustrate the use of verbatim blocks, consider the following \lambwiki source-code fragment:

\begin<boxed>{source}
Here's a box:

(((
---------
|  Box  |
---------
)))
\end{source}

The result produced by the composer is shown below:

\begin{subpage}
Here's a box:
\begin{verbatim}
---------
|  Box  |
---------
\end{verbatim}
\end{subpage}


\section[sec:source]{Source-code blocks}

While nothing prevents you from using the aforedescribed verbatim blocks for displaying
source-code listings, \lambwiki does have a dedicated facility for this purpose, with a
number of advantages.  Source-code blocks are declared in much the same way as verbatim
blocks, but use '\code{\{\{\{}' and '\code{\}\}\}}' as delimiter characters instead.
Moreover, they also accept --- albeit different --- style configuration options.

Similarly to verbatim blocks, the style configuration of a source-code environment is
to be placed immediately after the '\code{\{\{\{}' sequence that signals the beginning
of the block (whitespace is optional both before and after, but the configuration
must be on the same line).  Because multiple configuration options are allowed,
these should be separated by commas.  Moreover, options come in two different types.
The first was already discussed in the previous section about verbatim blocks:
class name declarations.  The second type is a key-value declaration, whose generic
form is '\code{\emph{key}=\emph{value}}', for a key '\code{\emph{key}}' and value
'\code{\emph{value}}'.

There are two key-value configuration options available.  The most important is
undoubtedly '\code{lang}', which when set with the name of a language, sets the rules for
syntax highlighting.  Also available is '\code{nums}', which accepts a boolean value and
dictates whether line numbers should be added to the source code listing.  Valid boolean
values are '\code{true}', '\code{yes}' and '\code{on}' for truth value \emph{true} and
'\code{false}', '\code{no}' and '\code{off}' for truth value \emph{false}.  It defaults
to false.

The obligatory example, showing an OCaml source-code fragment:

\begin<boxed>{source}
{{{lang=caml,nums=true,zebra
type 'a tree =
    | Leaf
    | Node of 'a * 'a tree * 'a tree

let rec count = function
    | Leaf                     -> 0
    | Node (node, left, right) -> 1 + (count left) + (count right)
}}}
\end{source}

The result as produced from the composer is shown below.  Note the syntax-highlighting
following OCaml conventions, the zebra lines, and the display of line numbers:

\begin<lang=caml,nums=true,zebra>{source}
type 'a tree =
    | Leaf
    | Node of 'a * 'a tree * 'a tree

let rec count = function
    | Leaf                     -> 0
    | Node (node, left, right) -> 1 + (count left) + (count right)
\end{source}


\section[sec:sectioning]{Sectioning}

\lambwiki supports up to three levels of sectioning headers, designated as
\emph{sections}, \emph{sub-sections}, and \emph{sub-sub-sections}.  These map
directly to \caps{html}'s \code{h1}, \code{h2}, and \code{h3} elements, respectively.
The declaration of a header is done by prefixing the header text with one, two, or
three times the character '\code{=}', where the number of equal signs corresponds to
the sectioning level.  Note that whitespace between the equal sign(s) and the header
text is optional, and is discarded if present.

Consider thus the following \lambwiki fragment:

\begin<boxed>{source}
= This is a section

Lorem ipsum dolor sit amet.

== This is a sub-section

Lorem ipsum dolor sit amet.

=== This is a sub-subsection

Lorem ipsum dolor sit amet.
\end{source}

Below is the result as produced by the \lambwiki composer.  Note that the numbering is
automatically assigned.

\begin{subpage}
\section(1){This is a section}

Lorem ipsum dolor sit amet.

\subsection(1.1){This is a sub-section}

Lorem ipsum dolor sit amet.

\subsubsection(1.1.1){This is a sub-subsection}

Lorem ipsum dolor sit amet.
\end{subpage}


\appendix


\part(){Backmatter}

\bibliography

\begin[bib:markdown]{bib}
\who{John Gruber and Aaron Swartz}
\what{\caps{markdown} homepage}
\where{\link{http://daringfireball.net/projects/markdown/}}
\end{bib}

\begin[bib:creole]{bib}
\who{Various}
\what{\caps{creole} homepage}
\where{\link{http://www.wikicreole.org/}}
\end{bib}

\begin[bib:latex]{bib}
\who{Leslie Lamport}
\what{LaTeX: a Document Preparation System (2\sup{nd} edition)}
\where{Addison-Wesley Professional, 1994. ISBN 0-201-52983-1.}
\end{bib}

\begin[bib:lambtex]{bib}
\who{Dario Teixeira}
\what{\lambtex manual}
\where{\link{http://lambdoc.forge.ocamlcore.org/}}
\end{bib}

\begin[bib:lambdoc]{bib}
\who{Dario Teixeira}
\what{\lambdoc homepage}
\where{\link{http://lambdoc.forge.ocamlcore.org/}}
\end{bib}

